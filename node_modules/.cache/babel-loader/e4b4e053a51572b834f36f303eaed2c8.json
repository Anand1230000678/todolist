{"ast":null,"code":"import { useState, useRef, useEffect } from 'react';\n\nfunction useInterval(fn, interval) {\n  const [active, setActive] = useState(false);\n  const intervalRef = useRef();\n  const fnRef = useRef();\n  useEffect(() => {\n    fnRef.current = fn;\n  }, [fn]);\n\n  const start = () => {\n    setActive(old => {\n      if (!old) {\n        intervalRef.current = window.setInterval(fnRef.current, interval);\n      }\n\n      return true;\n    });\n  };\n\n  const stop = () => {\n    setActive(false);\n    window.clearInterval(intervalRef.current);\n  };\n\n  const toggle = () => {\n    if (active) {\n      stop();\n    } else {\n      start();\n    }\n  };\n\n  return {\n    start,\n    stop,\n    toggle,\n    active\n  };\n}\n\nexport { useInterval };","map":{"version":3,"mappings":";;AACO,SAASA,WAAT,CAAqBC,EAArB,EAAyBC,QAAzB,EAAmC;EACxC,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBC,QAAQ,CAAC,KAAD,CAApC;EACA,MAAMC,WAAW,GAAGC,MAAM,EAA1B;EACA,MAAMC,KAAK,GAAGD,MAAM,EAApB;EACAE,SAAS,CAAC,MAAM;IACdD,KAAK,CAACE,OAAN,GAAgBT,EAAhB;EACD,CAFQ,EAEN,CAACA,EAAD,CAFM,CAAT;;EAGA,MAAMU,KAAK,GAAG,MAAM;IAClBP,SAAS,CAAEQ,GAAD,IAAS;MACjB,IAAI,CAACA,GAAL,EAAU;QACRN,WAAW,CAACI,OAAZ,GAAsBG,MAAM,CAACC,WAAP,CAAmBN,KAAK,CAACE,OAAzB,EAAkCR,QAAlC,CAAtB;MACD;;MACD,OAAO,IAAP;IACD,CALQ,CAAT;EAMD,CAPD;;EAQA,MAAMa,IAAI,GAAG,MAAM;IACjBX,SAAS,CAAC,KAAD,CAAT;IACAS,MAAM,CAACG,aAAP,CAAqBV,WAAW,CAACI,OAAjC;EACD,CAHD;;EAIA,MAAMO,MAAM,GAAG,MAAM;IACnB,IAAId,MAAJ,EAAY;MACVY,IAAI;IACL,CAFD,MAEO;MACLJ,KAAK;IACN;EACF,CAND;;EAOA,OAAO;IAAEA,KAAF;IAASI,IAAT;IAAeE,MAAf;IAAuBd;EAAvB,CAAP;AACF","names":["useInterval","fn","interval","active","setActive","useState","intervalRef","useRef","fnRef","useEffect","current","start","old","window","setInterval","stop","clearInterval","toggle"],"sources":["C:\\Users\\anandsinghchauhan\\OneDrive\\Desktop\\todo_react_app\\node_modules\\@mantine\\hooks\\src\\use-interval\\use-interval.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nexport function useInterval(fn: () => void, interval: number) {\n  const [active, setActive] = useState(false);\n  const intervalRef = useRef<number>();\n  const fnRef = useRef<() => void>();\n\n  useEffect(() => {\n    fnRef.current = fn;\n  }, [fn]);\n\n  const start = () => {\n    setActive((old) => {\n      if (!old) {\n        intervalRef.current = window.setInterval(fnRef.current, interval);\n      }\n      return true;\n    });\n  };\n\n  const stop = () => {\n    setActive(false);\n    window.clearInterval(intervalRef.current);\n  };\n\n  const toggle = () => {\n    if (active) {\n      stop();\n    } else {\n      start();\n    }\n  };\n\n  return { start, stop, toggle, active };\n}\n"]},"metadata":{},"sourceType":"module"}